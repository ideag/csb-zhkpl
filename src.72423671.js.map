{"version":3,"sources":["src/classes/Team.js","src/classes/Game.js","src/classes/Series.js","src/classes/PlayOff.js","src/classes/RoundRobin.js","src/classes/League.js","src/classes/LKL.js","src/classes/Euroleague.js","src/index.js"],"names":["Team","props","Object","assign","name","rating","Game","id","teams","playbyplay","possession","quarter","quarters","score","score_quarters","time_quarter","time_overtime","_random","time","store","getName","offTeam","defTeam","outcomes","_outcomes","result","switchPossesion","countScore","startQuarter","doPossession","endQuarter","startOvertime","endOvertime","overtime","tipOff","runRegulation","runOvertime","endGame","team","points","msg","level","message","_time","_score","push","items","show","filter","item","whoWon","whoLost","map","join","quarterly","offensiveTeam","defensiveTeam","offTeamRating","getRating","ratio","i","mins","Math","floor","secs","toString","padStart","random","length","Series","limit","type","home","wins","games","isWon","playGame","game","homeGame","runGame","winner","awayGame","loser","PlayOff","winners","losers","series","createPairs","pairs","serieOptions","j","runSeries","getWinner","getLoser","showFinalScore","pairCount","results","RoundRobin","n","randomize","realN","roundNo","pairNo","a","b","reverse","rounds","getRound","_reverse","_shuffle","sort","new_rounds","JSON","parse","stringify","ceil","console","log","pair","getPair","League","days","day","table","tableSort","k","loses","setupSchedule","setupGames","runDay","showTable","robin","getRounds","concat","winnerId","loserId","LKL","regularSeasonOptions","limitPlayoffs","quarterFinalsOptions","semiFinalsOptions","smallFinalsOptions","finalsOptions","runRegularSeason","runQuarterFinals","runSemiFinals","runSmallFinals","runFinals","regularSeason","runLeague","playoffTeams","getTeamsStandings","slice","quarterFinals","runPlayOff","semiFinalsTeams","getWinners","semiFinals","smallFinalsTeams","getLosers","finalsTeams","smallFinals","finals","Euroleague","team01","city","team02","team03","team04","team05","team06","team07","team08","team09","team10","team11","team12","team13","team14","team15","team16","team17","team18","el","runSeason","document","getElementById","innerHTML"],"mappings":"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","file":"src.72423671.js","sourceRoot":"..","sourcesContent":["export default class Team {\n  constructor(props) {\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  getName() {\n    return this.name;\n  }\n  getRating() {\n    return this.rating;\n  }\n}\n","export default class Game {\n  constructor(props) {\n    this.id = \"\";\n    this.teams = [];\n    this.playbyplay = [];\n    this.possession = null;\n    this.quarter = -1;\n    this.quarters = 4;\n    this.score = [0, 0];\n    this.score_quarters = [];\n    this.time_quarter = 10 * 60;\n    this.time_overtime = 5 * 60;\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  tipOff() {\n    this.possession = this._random([0, 1]);\n    this.score = [0, 0];\n    this.time = this.time_quarter;\n    this.store(this.teams[this.possession].getName() + \" wins the tip-off.\", 1);\n  }\n  startQuarter() {\n    this.quarter++;\n    this.score_quarters[this.quarter] = [0, 0];\n    this.time = this.time_quarter;\n    this.store(\"Q\" + this.quarter + \" starts.\", 1);\n  }\n  startOvertime() {\n    this.quarter++;\n    this.score_quarters[this.quarter] = [0, 0];\n    this.time = this.time_overtime;\n    this.store(\"O\" + (this.quarter - this.quarters) + \" starts.\", 1);\n  }\n  endQuarter() {\n    this.store(\"Q\" + this.quarter + \" ends.\", 2);\n  }\n  endOvertime() {\n    this.store(\"O\" + (this.quarter - this.quarters) + \" ends.\", 2);\n    this.quarter++;\n  }\n  endGame() {\n    this.store(\"Game over.\", 3);\n  }\n  doPossession() {\n    this.time -= 20;\n    if (0 > this.time) {\n      this.time = 0;\n    }\n    const offTeam = this.possession;\n    const defTeam = this.possession === 1 ? 0 : 1;\n    const outcomes = this._outcomes(this.teams[offTeam], this.teams[defTeam]);\n    const result = this._random(outcomes);\n    switch (result) {\n      case 0:\n        this.store(\n          this.teams[this.possession].getName() + \" failed to score.\",\n          1\n        );\n        this.switchPossesion();\n        break;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n        this.store(\n          this.teams[this.possession].getName() + \" scored \" + result + \".\",\n          1\n        );\n        this.countScore(this.possession, result);\n        this.switchPossesion();\n        break;\n      case -1:\n        this.store(\n          this.teams[this.possession].getName() + \" failed to score.\",\n          1\n        );\n        this.store(\n          this.teams[this.possession].getName() + \" offensive rebound.\",\n          1\n        );\n        break;\n      default:\n        break;\n    }\n    if (0 === this.time) {\n      this.store(\"End of quarter.\", 1);\n    }\n  }\n  runRegulation() {\n    while (this.quarter < this.quarters - 1) {\n      this.startQuarter();\n      while (this.time > 0) {\n        this.doPossession();\n      }\n      this.endQuarter();\n    }\n  }\n  runOvertime() {\n    while (this.score[0] === this.score[1]) {\n      this.startOvertime();\n      while (this.time > 0) {\n        this.doPossession();\n      }\n      this.endOvertime();\n    }\n  }\n  runGame(overtime = true) {\n    this.tipOff();\n    this.runRegulation();\n    if (overtime) {\n      this.runOvertime();\n    }\n    this.endGame();\n  }\n  switchPossesion() {\n    this.possession = this.possession === 0 ? 1 : 0;\n  }\n  countScore(team, points) {\n    this.score[team] += points;\n    this.score_quarters[this.quarter][team] += points;\n  }\n  store(msg, level) {\n    let message = \"[Q\" + this.quarter + \"] \";\n    message += this._time(this.time) + \" \";\n    message += this._score() + \" \";\n    message += msg;\n    this.playbyplay.push({ message, level });\n  }\n  showPlayByPlay() {\n    let items = this.playbyplay;\n    return this.show(items);\n  }\n  showQuarters() {\n    let items = this.playbyplay.filter((item) => item.level > 1);\n    return this.show(items);\n  }\n  showGame() {\n    let items = this.playbyplay.filter((item) => item.level > 2);\n    return this.show(items);\n  }\n  whoWon() {\n    return this.score[0] > this.score[1]\n      ? 0\n      : this.score[1] > this.score[0]\n      ? 1\n      : -1;\n  }\n  whoLost() {\n    return this.score[0] > this.score[1]\n      ? 1\n      : this.score[1] > this.score[0]\n      ? 0\n      : -1;\n  }\n  getWinner() {\n    return this.teams[this.whoWon()];\n  }\n  getLoser() {\n    return this.teams[this.whoLost()];\n  }\n  show(items) {\n    return items\n      .map((item) => \"<code>\" + item.message + \"</code>\")\n      .join(\"<br/>\");\n  }\n  showFinalScore(quarterly = false) {\n    let result = this.teams[0].getName();\n    result += \"-\";\n    result += this.teams[1].getName();\n    result += \" \";\n    result += this._score();\n    if (quarterly) {\n      result += \" (\";\n      result += this.score_quarters\n        .map((score) => this._score(score))\n        .join(\" \");\n      result += \")\";\n    }\n    return result;\n  }\n  _outcomes(offensiveTeam, defensiveTeam) {\n    let outcomes = [];\n    const offTeamRating = offensiveTeam.getRating();\n    const defTeamRating = defensiveTeam.getRating();\n    const ratio = offTeamRating / (offTeamRating + defTeamRating);\n    const count = 10;\n    for (let i = 0; i < count; ++i) {\n      if (i < ratio * count) {\n        outcomes.push(2);\n      } else {\n        outcomes.push(0);\n      }\n    }\n    outcomes.push(1);\n    outcomes.push(3);\n    outcomes.push(3);\n    outcomes.push(4);\n    outcomes.push(-1);\n    return outcomes;\n  }\n\n  _time(time) {\n    const mins = Math.floor(time / 60);\n    const secs = time - 60 * mins;\n    return (\n      mins.toString().padStart(2, \"0\") + \":\" + secs.toString().padStart(2, \"0\")\n    );\n  }\n  _score(score = false) {\n    if (false === score) {\n      score = this.score;\n    }\n    return score[0] + \":\" + score[1];\n  }\n  _random(items) {\n    return items[Math.floor(Math.random() * items.length)];\n  }\n}\n","import Game from \"./Game\";\n\nexport default class Series {\n  constructor(props) {\n    this.limit = 4;\n    this.type = \"wins\";\n    this.home = 0;\n    this.wins = [0, 0];\n    this.games = [];\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  runSeries() {\n    while (!this.isWon()) {\n      this.playGame();\n    }\n  }\n  isWon() {\n    switch (this.type) {\n      case \"wins\":\n      default:\n        return this.limit <= this.wins[0] || this.limit <= this.wins[1];\n    }\n  }\n  playGame() {\n    switch (this.type) {\n      case \"wins\":\n      default:\n        if (this.home === 0) {\n          this.home = 1;\n          const game = this.homeGame();\n          game.runGame();\n          const winner = game.whoWon();\n          this.wins[winner] += 1;\n          this.games.push(game);\n        } else {\n          this.home = 0;\n          const game = this.awayGame();\n          game.runGame();\n          const winner = game.whoWon() === 0 ? 1 : 0;\n          this.wins[winner] += 1;\n          this.games.push(game);\n        }\n        break;\n    }\n  }\n  getWinner() {\n    const winner = this.wins[0] > this.wins[1] ? 0 : 1;\n    return this.teams[winner];\n  }\n  getLoser() {\n    const loser = this.wins[0] > this.wins[1] ? 1 : 0;\n    return this.teams[loser];\n  }\n  homeGame() {\n    return new Game({ teams: [this.teams[0], this.teams[1]] });\n  }\n  awayGame() {\n    return new Game({ teams: [this.teams[1], this.teams[0]] });\n  }\n  showFinalScore(games = false) {\n    let result = this.teams[0].getName();\n    result += \"-\";\n    result += this.teams[1].getName();\n    result += \" \";\n    result += this._score();\n    if (games) {\n      result += \" (\";\n      result += this.games.map((game) => game._score()).join(\" \");\n      result += \")\";\n    }\n    return result;\n  }\n  _score() {\n    return this.wins[0] + \":\" + this.wins[1];\n  }\n}\n","import Series from \"./Series\";\n\nexport default class PlayOff {\n  constructor(props) {\n    this.teams = [];\n    this.winners = [];\n    this.losers = [];\n    this.series = [];\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  runPlayOff() {\n    this.createPairs();\n    for (let i in this.pairs) {\n      const serieOptions = {\n        teams: this.pairs[i],\n        ...this.serieOptions\n      };\n      this.series.push(new Series(serieOptions));\n    }\n    let result = [];\n    for (let j in this.series) {\n      this.series[j].runSeries();\n      this.winners.push(this.series[j].getWinner());\n      this.losers.push(this.series[j].getLoser());\n      result.push(this.series[j].showFinalScore());\n    }\n    return result;\n  }\n  getWinners() {\n    return this.winners;\n  }\n  getLosers() {\n    return this.losers;\n  }\n  createPairs() {\n    const pairCount = Math.floor(this.teams.length / 2);\n    let pairs = [];\n    for (let i = 0; i < pairCount; ++i) {\n      pairs.push([this.teams[i], this.teams[this.teams.length - 1 - i]]);\n    }\n    this.pairs = pairs;\n  }\n  showFinalScore() {\n    let results = [];\n    for (let i in this.series) {\n      results.push(this.series[i].showFinalScore());\n    }\n    return results;\n  }\n}\n","export default class RoundRobin {\n  constructor(n, randomize = false) {\n    this.realN = n;\n    this.n = n % 2 === 0 ? n : n + 1;\n    this.randomize = randomize;\n  }\n  getPair(roundNo, pairNo) {\n    let a = 0;\n    let b = 0;\n    if (pairNo !== 0) {\n      a = pairNo - roundNo;\n      if (0 >= a) {\n        a += this.n - 1;\n      }\n    }\n    b = this.n - 1 - pairNo - roundNo;\n    if (0 >= b) {\n      b += this.n - 1;\n    }\n    return [a, b];\n  }\n  getRounds(reverse = false) {\n    let rounds = [];\n    for (let roundNo = 0; roundNo < this.n - 1; ++roundNo) {\n      rounds.push(this.getRound(roundNo));\n    }\n    if (reverse) {\n      rounds = this._reverse(rounds);\n    }\n    if (this.randomize) {\n      rounds = this._shuffle(rounds);\n    }\n    return rounds;\n  }\n  _shuffle(rounds) {\n    return rounds.sort((a, b) => 0.5 - Math.random());\n  }\n  _reverse(rounds) {\n    let new_rounds = JSON.parse(JSON.stringify(rounds));\n    for (let i in new_rounds) {\n      for (let j in new_rounds[i]) {\n        new_rounds[i][j] = new_rounds[i][j].reverse();\n      }\n    }\n    return new_rounds;\n  }\n  getRound(roundNo) {\n    let pairCount = Math.ceil(this.n / 2);\n    console.log(\"Pairs\", pairCount);\n    let pairs = [];\n    for (let pairNo = 0; pairNo < pairCount; ++pairNo) {\n      const pair = this.getPair(roundNo, pairNo);\n      if (\n        this.n !== this.realN &&\n        (pair[0] === this.n - 1 || pair[1] === this.n - 1)\n      ) {\n        continue;\n      }\n      pairs.push(pair);\n    }\n    return pairs;\n  }\n}\n","import Game from \"./Game\";\nimport RoundRobin from \"./RoundRobin\";\n\nexport default class League {\n  constructor(props) {\n    this.teams = [];\n    this.rounds = 2;\n    this.days = [];\n    this.day = 0;\n    this.table = [];\n    this.tableSort = (a, b) => {\n      return b.wins - a.wins;\n    };\n    if (props) {\n      Object.assign(this, props);\n    }\n    for (let k = 0; k < this.teams.length; ++k) {\n      this.teams[k].id = k;\n      this.table[k] = {\n        id: k,\n        games: 0,\n        wins: 0,\n        loses: 0,\n        points: 0\n      };\n    }\n    this.setupSchedule();\n    this.setupGames();\n  }\n  runLeague() {\n    let result = [];\n    // result.push(\"Season starts\");\n    for (let i in this.days) {\n      // result.push(\"Day \" + (i * 1 + 1 * 1));\n      // result = result.concat(this.runDay());\n      this.runDay();\n      // result.push(\"\");\n    }\n    result.push(this.showTable());\n    return result;\n  }\n  setupSchedule() {\n    const robin = new RoundRobin(this.teams.length, true);\n    for (let i = 0; i < this.rounds; ++i) {\n      let days = robin.getRounds(i % 2 === 1);\n      this.days = this.days.concat(days);\n    }\n    this.days = this._shuffle(this.days);\n  }\n  _shuffle(rounds) {\n    return rounds.sort((a, b) => 0.5 - Math.random());\n  }\n  setupGames() {\n    for (let i in this.days) {\n      for (let k in this.days[i]) {\n        this.days[i][k] = new Game({\n          teams: [\n            this.teams[this.days[i][k][0]],\n            this.teams[this.days[i][k][1]]\n          ]\n        });\n      }\n    }\n  }\n  showTable() {\n    let result = [];\n    result.push(\"<table>\");\n    let table = JSON.parse(JSON.stringify(this.table));\n    table.sort(this.tableSort);\n    for (let i in table) {\n      result.push(\"<tr>\");\n      result.push(\"<td>\");\n      result.push(this.teams[table[i].id].getName());\n      result.push(\"</td>\");\n      result.push(\"<td>\");\n      result.push(table[i].games);\n      result.push(\"</td>\");\n      result.push(\"<td>\");\n      result.push(table[i].wins);\n      result.push(\"</td>\");\n      result.push(\"<td>\");\n      result.push(table[i].loses);\n      result.push(\"</td>\");\n      result.push(\"<td>\");\n      result.push(table[i].points);\n      result.push(\"</td>\");\n      result.push(\"</tr>\");\n    }\n    result.push(\"</table>\");\n    return result.join(\"\");\n  }\n  getTeamsStandings() {\n    let result = [];\n    let table = JSON.parse(JSON.stringify(this.table));\n    table.sort(this.tableSort);\n    for (let i in table) {\n      result.push(this.teams[table[i].id]);\n    }\n    return result;\n  }\n  runDay() {\n    let result = [];\n    for (let i in this.days[this.day]) {\n      this.days[this.day][i].runGame();\n      const winnerId = this.days[this.day][i].getWinner().id;\n      const loserId = this.days[this.day][i].getLoser().id;\n      this.table[winnerId].games++;\n      this.table[winnerId].wins++;\n      this.table[winnerId].points++;\n      this.table[loserId].games++;\n      this.table[loserId].loses++;\n      result.push(this.days[this.day][i].showFinalScore());\n    }\n    ++this.day;\n    return result;\n  }\n}\n","import PlayOff from \"./PlayOff\";\nimport League from \"./League\";\n\nexport default class LKL {\n  constructor(props) {\n    this.teams = [];\n    this.regularSeasonOptions = {\n      rounds: 4\n    };\n    this.limitPlayoffs = 8;\n    this.quarterFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 2 }\n    };\n    this.semiFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 3 }\n    };\n    this.smallFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 3 }\n    };\n    this.finalsOptions = {\n      serieOptions: { type: \"wins\", limit: 4 }\n    };\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  runSeason() {\n    let result = [];\n    result = result.concat(this.runRegularSeason());\n    result = result.concat(this.runQuarterFinals());\n    result = result.concat(this.runSemiFinals());\n    result = result.concat(this.runSmallFinals());\n    result = result.concat(this.runFinals());\n    return result;\n  }\n  runRegularSeason() {\n    let result = [];\n    this.regularSeason = new League({\n      teams: this.teams,\n      ...this.regularSeasonOptions\n    });\n    result = result.concat(this.regularSeason.runLeague());\n    this.playoffTeams = this.regularSeason\n      .getTeamsStandings()\n      .slice(0, this.limitPlayoffs);\n    return result;\n  }\n  runQuarterFinals() {\n    let result = [];\n    this.quarterFinals = new PlayOff({\n      teams: this.playoffTeams,\n      ...this.quarterFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.quarterFinals.runPlayOff());\n\n    this.semiFinalsTeams = this.quarterFinals.getWinners();\n    return result;\n  }\n  runSemiFinals() {\n    let result = [];\n    this.semiFinals = new PlayOff({\n      teams: this.semiFinalsTeams,\n      ...this.semiFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.semiFinals.runPlayOff());\n    this.smallFinalsTeams = this.semiFinals.getLosers();\n    this.finalsTeams = this.semiFinals.getWinners();\n    return result;\n  }\n  runSmallFinals() {\n    let result = [];\n    this.smallFinals = new PlayOff({\n      teams: this.smallFinalsTeams,\n      ...this.smallFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.smallFinals.runPlayOff());\n\n    this.winners = this.smallFinals.getWinners();\n    return result;\n  }\n  runFinals() {\n    let result = [];\n    this.finals = new PlayOff({\n      teams: this.finalsTeams,\n      ...this.finalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.finals.runPlayOff());\n\n    this.winners = this.finals.getWinners();\n    return result;\n  }\n}\n","import PlayOff from \"./PlayOff\";\nimport League from \"./League\";\n\nexport default class Euroleague {\n  constructor(props) {\n    this.teams = [];\n    this.regularSeasonOptions = {\n      rounds: 2\n    };\n    this.limitPlayoffs = 8;\n    this.quarterFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 3 }\n    };\n    this.semiFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 1 }\n    };\n    this.smallFinalsOptions = {\n      serieOptions: { type: \"wins\", limit: 1 }\n    };\n    this.finalsOptions = {\n      serieOptions: { type: \"wins\", limit: 1 }\n    };\n    if (props) {\n      Object.assign(this, props);\n    }\n  }\n  runSeason() {\n    let result = [];\n    result = result.concat(this.runRegularSeason());\n    result = result.concat(this.runQuarterFinals());\n    result = result.concat(this.runSemiFinals());\n    result = result.concat(this.runSmallFinals());\n    result = result.concat(this.runFinals());\n    return result;\n  }\n  runRegularSeason() {\n    let result = [];\n    this.regularSeason = new League({\n      teams: this.teams,\n      ...this.regularSeasonOptions\n    });\n    result = result.concat(this.regularSeason.runLeague());\n    this.playoffTeams = this.regularSeason\n      .getTeamsStandings()\n      .slice(0, this.limitPlayoffs);\n    return result;\n  }\n  runQuarterFinals() {\n    let result = [];\n    this.quarterFinals = new PlayOff({\n      teams: this.playoffTeams,\n      ...this.quarterFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.quarterFinals.runPlayOff());\n\n    this.semiFinalsTeams = this.quarterFinals.getWinners();\n    return result;\n  }\n  runSemiFinals() {\n    let result = [];\n    this.semiFinals = new PlayOff({\n      teams: this.semiFinalsTeams,\n      ...this.semiFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.semiFinals.runPlayOff());\n    this.smallFinalsTeams = this.semiFinals.getLosers();\n    this.finalsTeams = this.semiFinals.getWinners();\n    return result;\n  }\n  runSmallFinals() {\n    let result = [];\n    this.smallFinals = new PlayOff({\n      teams: this.smallFinalsTeams,\n      ...this.smallFinalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.smallFinals.runPlayOff());\n\n    this.winners = this.smallFinals.getWinners();\n    return result;\n  }\n  runFinals() {\n    let result = [];\n    this.finals = new PlayOff({\n      teams: this.finalsTeams,\n      ...this.finalsOptions\n    });\n\n    result.push(\"\");\n    result = result.concat(this.finals.runPlayOff());\n\n    this.winners = this.finals.getWinners();\n    return result;\n  }\n}\n","import \"./styles.css\";\n\nimport Team from \"./classes/Team\";\nimport LKL from \"./classes/LKL\";\nimport Euroleague from \"./classes/Euroleague\";\n\n// const teamA = new Team({ name: \"Zalgiris\", city: \"Kaunas\", rating: 505 });\n// const teamB = new Team({ name: \"Rytas\", city: \"Vilnius\", rating: 504 });\n// const teamC = new Team({ name: \"Juventus\", city: \"Utena\", rating: 503 });\n// const teamD = new Team({ name: \"Lietkabelis\", city: \"Panevezys\", rating: 502 });\n// const teamE = new Team({ name: \"CBet\", city: \"Prienai\", rating: 501 });\n// const teamF = new Team({ name: \"Neptunas\", city: \"Klaipeda\", rating: 500 });\n// const teamG = new Team({ name: \"Siauliai\", city: \"Siauliai\", rating: 500 });\n// const teamH = new Team({\n//   name: \"Pieno Zvaigzdes\",\n//   city: \"Pasvalys\",\n//   rating: 495\n// });\n// const teamI = new Team({ name: \"Dzukija\", city: \"Alytus\", rating: 490 });\n// const teamJ = new Team({ name: \"Nevezis\", city: \"Kedainiai\", rating: 490 });\n// const teamK = new Team({ name: \"CBet (J)\", city: \"Jonave\", rating: 490 });\n\n// let result = [];\n// let lkl = new LKL({\n//   teams: [teamA, teamB, teamC, teamD, teamE, teamF, teamG, teamH, teamI, teamJ, teamK],\n// });\n// result = result.concat(lkl.runSeason());\n\nconst team01 = new Team({ name: \"Zalgiris\", city: \"Kaunas\", rating: 505 });\nconst team02 = new Team({ name: \"Alba\", city: \"Kaunas\", rating: 505 });\nconst team03 = new Team({ name: \"Bayern\", city: \"Kaunas\", rating: 505 });\nconst team04 = new Team({ name: \"CSKA\", city: \"Kaunas\", rating: 505 });\nconst team05 = new Team({ name: \"Chimki\", city: \"Kaunas\", rating: 505 });\nconst team06 = new Team({ name: \"Zenit\", city: \"Kaunas\", rating: 505 });\nconst team07 = new Team({ name: \"Asvel\", city: \"Kaunas\", rating: 505 });\nconst team08 = new Team({ name: \"Real\", city: \"Kaunas\", rating: 505 });\nconst team09 = new Team({ name: \"Barcelona\", city: \"Kaunas\", rating: 505 });\nconst team10 = new Team({ name: \"Valencia\", city: \"Kaunas\", rating: 505 });\nconst team11 = new Team({ name: \"Baskonia\", city: \"Kaunas\", rating: 505 });\nconst team12 = new Team({ name: \"Olympiacos\", city: \"Kaunas\", rating: 505 });\nconst team13 = new Team({ name: \"Panathinaicos\", city: \"Kaunas\", rating: 505 });\nconst team14 = new Team({ name: \"Anadolu Efes\", city: \"Kaunas\", rating: 505 });\nconst team15 = new Team({ name: \"Fenerbache\", city: \"Kaunas\", rating: 505 });\nconst team16 = new Team({ name: \"Maccabi\", city: \"Kaunas\", rating: 505 });\nconst team17 = new Team({ name: \"Crvena Zvezda\", city: \"Kaunas\", rating: 505 });\nconst team18 = new Team({ name: \"Armani\", city: \"Kaunas\", rating: 505 });\n\nlet result = [];\nlet el = new Euroleague({\n  teams: [\n    team01,\n    team02,\n    team03,\n    team04,\n    team05,\n    team06,\n    team07,\n    team08,\n    team09,\n    team10,\n    team11,\n    team12,\n    team13,\n    team14,\n    team15,\n    team16,\n    team17,\n    team18\n  ]\n});\nresult = result.concat(el.runSeason());\n\n// const lkl = new League({\n//   teams: [teamA, teamB, teamC, teamD, teamE, teamF, teamG, teamH, teamI, teamJ],\n//   rounds: 4\n// });\n// result = result.concat(lkl.runLeague());\n// result.push(lkl.showTable());\n// console.log(lkl.getTeamsStandings());\n// let playoffTeams = lkl.getTeamsStandings().slice(0,8);\n// console.log(playoffTeams);\n\n// const quarterFinal = new PlayOff({\n//   teams: playoffTeams,\n//   seriesOptions: { type: \"wins\", limit: 3 }\n// });\n\n// result.push(\"\");\n// result = result.concat(quarterFinal.runPlayOff());\n\n// const semifinalTeams = quarterFinal.getWinners();\n// console.log( semifinalTeams );\n\n// const semiFinal = new PlayOff({\n//   teams: semifinalTeams,\n//   seriesOptions: { type: \"wins\", limit: 3 }\n// });\n\n// result.push(\"\");\n// result = result.concat(semiFinal.runPlayOff());\n\n// const finalTeams = semiFinal.getWinners();\n\n// const finals = new PlayOff({\n//   teams: finalTeams,\n//   seriesOptions: { type: \"wins\", limit: 4 }\n// });\n\n// result.push(\"\");\n// result = result.concat(finals.runPlayOff());\n\n// const winners = finals.getWinners();\n\n// const robin = new RoundRobin(8);\n// const rounds = robin.getRounds(true, true);\n// for (let i in rounds) {\n//   result.push(rounds[i].join(\"<br>\"));\n//   result.push(\"\");\n// }\n\n// result.push(robin.getRound(0).join(\"<br>\"));\n// result.push(\"\");\n// result.push(robin.getRound(1).join(\"<br>\"));\n// result.push(\"\");\n// result.push(robin.getRound(2).join(\"<br>\"));\n// result.push(\"\");\n// result.push( 'Day 1' );\n// result = result.concat( lkl.runDay() );\n// result.push( '' );\n// result.push( 'Day 2' );\n// result = result.concat( lkl.runDay() );\n// result.push( '' );\n// result.push( 'Day 3' );\n// result = result.concat( lkl.runDay() );\n// result.push( '' );\n// result.push( 'Day 1' );\n// result = result.concat( lkl.runDay() );\n// result.push( '' );\n// result.push( 'Day 2' );\n// result = result.concat( lkl.runDay() );\n// result.push( '' );\n// result.push( 'Day 3' );\n// result = result.concat( lkl.runDay() );\n// result = result.concat(lkl.runLeague());\n// result.push(lkl.showTable());\n\n// const final_four = new PlayOff({\n//   teams: [teamA, teamB, teamC, teamD, teamE, teamF, teamG, teamH],\n//   seriesOptions: { type: \"wins\", limit: 3 }\n// });\n// final_four.runPlayOff();\n// let result = final_four.showFinalScore();\n// for (let i = 0; i < 10; ++i) {\n//   const final_series = new Series({ teams: [teamA, teamB], limit: 4 });\n//   final_series.runSeries();\n//   result.push(final_series.showFinalScore(true));\n// }\nresult = result.join(\"<br/>\");\n// newGame.score = [70,70];\n// newGame.possession = 0;\n// newGame.quarter = 4;\n// newGame.runOvertime();\n\n// newGame.runGame();\n// result += newGame.showFinalScore(true);\n\ndocument.getElementById(\"app\").innerHTML = result;\n"]}